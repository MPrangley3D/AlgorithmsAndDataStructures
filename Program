using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Diagnostics;
using System.Threading;

namespace Algorithms
{
    class Algorithms
    {
        public int GCD_NonRecursive(int a, int b)
        {
            while (a != 0 && b != 0)
            {
                if (a > b)
                {
                    a = a % b;
                }
                else
                {
                    b = b % a;
                }
            }

            if (a != 0)
                return a;
            else
                return b;
        }

        public int GDC_Recursive(int a, int b)
        {
            if (a == 0)
                return b;
            if (b == 0)
                return a;
            if (a > b)
                return GDC_Recursive(a % b, b);
            else
                return GDC_Recursive(a, b % a);
        }
    }

    class myStack
    {
        List<int> items = new List<int>();

        public bool is_Empty()
        {
            if (items.Count == 0)
            {
                Console.WriteLine("Empty Check Returned True");
                return true;
            }
            Console.WriteLine("Empty Check Returned False");
            return false;
        }

        public void Push(int newItem)
        {
            Console.WriteLine("New Value Added: " + newItem);
            items.Insert(0, newItem);
        }

        public int Pop()
        {
            int _pop = items[0];
            Console.WriteLine("Value Removed & Returned: " + _pop);
            items.RemoveAt(0);
            return _pop;
        }

        public int Peek()
        {
            Console.WriteLine("Peeked Value: " + items[0]);
            return items[0];
        }

        public int Size()
        {
            Console.WriteLine("Size of: " + items.Count);
            return items.Count;
        }
    }

    class FizzBuzz
    {
        public void RunFizzBuzz(int stop = 100, int fizzInt = 3, string fizzWord = "Fizz", int buzzInt = 5, string buzzWord = "Buzz")
        {
            for (int i = 1; i <= stop; i++)
            {
                bool checkFizz = i % fizzInt == 0 ? true : false;
                bool checkBuzz = i % buzzInt == 0 ? true : false;

                if (checkBuzz && checkFizz)
                {
                    Console.WriteLine(fizzWord + " " + buzzWord);
                }
                else if (checkFizz)
                {
                    Console.WriteLine(fizzWord);
                }
                else if (checkBuzz)
                {
                    Console.WriteLine(buzzWord);
                }
                else
                {
                    Console.WriteLine("# " + i);
                }
            }
        }
    }

    class SequentialSearch
    {
        public bool RunSequentialSearch(List<string> list, string searchString)
        {
            foreach (string item in list)
            {
                if (item == searchString)
                {
                    Console.WriteLine("Found Item: " + searchString + " at " + list.IndexOf(item));
                    return true;
                }

            }
            Console.WriteLine(searchString + " Not Found!");
            return false;
        }
    }

    class SequentialIntegerSearch
    {
        public bool RunSequentialSearch(List<int> list, int searchString)
        {
            foreach (int item in list)
            {
                if (item == searchString)
                {
                    Console.WriteLine("Found Item: " + searchString + " at " + list.IndexOf(item));
                    return true;
                }

            }
            Console.WriteLine(searchString + " Not Found!");
            return false;
        }
    }

    class Palindrome
    {
        public string wordInverter(string word)
        {
            var charArray = word.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }

        public bool RunPalindrome(string word)
        {
            word = word.ToUpper();
            Console.WriteLine("Checking Word: " + word);
            string inverseWord = wordInverter(word);
            Console.WriteLine("Inverted Word: " + inverseWord);

            if (word == inverseWord)
            {
                return true;
            }
            return false;
        }
    }

    class Anagram
    {
        public bool RunAnagram(string firstWord, string secondWord)
        {
            var firstWordArray = firstWord.ToUpper().ToCharArray();
            var secondWordArray = secondWord.ToUpper().ToCharArray();

            Array.Sort(firstWordArray);
            Array.Sort(secondWordArray);

            if (Enumerable.SequenceEqual(firstWordArray, secondWordArray))
            {
                return true;
            }
            return false;
        }
    }

    class UniqueCharCounter
    {
        public object RunCharCounter(string word)
        {
            Console.WriteLine("For String: '" + word + "'");
            word = word.ToLower();
            Dictionary<char, int> myDict = new Dictionary<char, int>();

            var charArray = word.ToCharArray();
            foreach (char c in charArray)
            {
                if (myDict.ContainsKey(c))
                {
                    myDict[c] += 1;
                }
                else
                {
                    myDict.Add(c, 1);
                }
            }

            return myDict;
        }
    }

    class BottlesOfBeer
    {
        public void SingBottlesOfBeer(int bottles = 99)
        {
            while (bottles > 1)
            {
                string chorus = bottles + " bottles of beer on the wall, " + bottles + " bottles of beer!  Ya take one down, pass it around " + (bottles - 1) + " bottles of beer on the wall!";
                Console.WriteLine(chorus);
                bottles--;
                return;
            }
            if (bottles == 1)
            {
                string chorus = bottles + " bottle of beer on the wall, " + bottles + " bottle of beer!  Ya take it down, pass it around no more bottles of beer on the wall!!!  *Hic!* ";
                Console.WriteLine(chorus);
                bottles--;
            }
        }

        public void RecursiveIPAs(int bottles = 99)
        {
            string chorus = "";
            if (bottles > 1)
            {
                chorus = bottles + " bottles of beer on the wall, " + bottles + " bottles of beer!  Ya take one down, pass it around " + (bottles - 1) + " bottles of beer on the wall!";
                Console.WriteLine(chorus);
                bottles--;
                RecursiveIPAs(bottles);
            }
            else
            {
                chorus = bottles + " bottle of beer on the wall, " + bottles + " bottle of beer!  Ya take it down, pass it around no more bottles of beer on the wall!!!  *Hic!* ";
                Console.WriteLine(chorus);
                return;
            }
        }
    }

    public class ValidNumber
    {
        public object CreateCache()
        {
            //Cache acceptable values
            HashSet<char> characterCache = new HashSet<char>();
            char[] setterArray = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', '+', '-', '.' };
            foreach (char c in setterArray)
            {
                characterCache.Add(c);
            }

            return characterCache;
        }

        public object CreateExponentCache()
        {
            //Cache acceptable exponents
            HashSet<char> exponentCache = new HashSet<char>();
            char[] setterArray = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '+' };
            foreach (char c in setterArray)
            {
                exponentCache.Add(c);
            }

            return exponentCache;
        }

        public bool ExponentIsValid(List<char> subArray)
        {
            //We will only make this cache when needed
            HashSet<char> exponentCache = CreateExponentCache() as HashSet<char>;
            int expLength = subArray.Count();

            if (subArray.Contains('-'))
            {
                if (expLength == 1)
                    return false;
                //  if(subArray[1] == '0' && expLength > 2)
                //    return false;
                if (LeadsWithSign(subArray))
                    return false;
            }

            //  if (subArray[0] == '0' && expLength > 1)
            //    return false;

            foreach (char c in subArray)
            {
                if (Checker(c, exponentCache))
                    continue;
                else
                    return false;
            }
            return true;
        }

        public bool Checker(char c, HashSet<char> cache)
        {
            if (cache.Contains(c))
            {
                return true;
            }
            else
            {
                Console.WriteLine("Character not present in cache: " + c);
                return false;
            }
        }

        public bool LeadsWithSign(List<char> mySubarray)
        {
            //Check if the lead character is a sign, update accordingly
            if (mySubarray[0] != '-' && mySubarray[0] != '+')
            {
                Console.WriteLine("Did not see the expected leading ± sign!");
                return true;
            }

            return false;
        }

        public bool TooManyPosNegSigns(char[] myArray)
        {
            /*
            //Optional: Can't lead with a + sign
            if(myArray[0] == '+')
            {
                Console.WriteLine("Cannot lead with a +");
                return true;
            }
            */

            //Check number of ± signs - cannot logically have more than 2 IF e is present, else 1
            int totalCount = 0;
            int maxSigns = 1;
            foreach (char c in myArray)
            {
                if (c == '-' || c == '+')
                {
                    totalCount++;
                }
            }
            if (myArray.Contains('e'))
            {
                maxSigns = 2;
            }
            if (totalCount > maxSigns)
            {
                Console.WriteLine("Found more signs than are allowed!");
                return true;
            }

            //We begin with the assumption that we have 1 ± sign, and it is for the exponent value
            bool leadsWithSign = false;
            int maxAllowed = 0;

            //Check if the lead character is a sign, update accordingly
            if (myArray[0] == '-' || myArray[0] == '+')
            {
                leadsWithSign = true;
                maxAllowed = 1;
            }

            //If the total count is 2, the lead must be a sign
            if (totalCount == 2 && !leadsWithSign)
            {
                Console.WriteLine("Did not see the expected leading ± sign!");
                return true;
            }

            //Count the characters until we hit the exponent sign
            int counter = 0;
            foreach (char c in myArray)
            {

                if (c == '-' || c == '+')
                {
                    counter++;
                }
                else if (c == 'e')
                {
                    return false;
                }

                if (counter > maxAllowed)
                {
                    Console.WriteLine("Too Many ± Signs!");
                    return true;
                }
            }
            return false;
        }

        public bool TooManyPeriods(char[] myArray)
        {
            if (myArray[0] == '.' && myArray.Count() == 1)
                return true;

            int periodCounter = 0;
            foreach (char c in myArray)
            {
                if (c == '.')
                {
                    periodCounter++;
                }
                else if (c == 'e' && periodCounter == 0)
                {
                    Console.WriteLine("Period is in exponent");
                    return true;
                }
            }
            if (periodCounter > 1)
            {
                Console.WriteLine("Too many Periods!");
                return true;
            }
            return false;
        }

        public bool FalseExponentDeclaration(char[] myArray, int charCount)
        {
            if (myArray[0] == 'e')
            {
                Console.WriteLine("Number cannot begin with exponent sign!");
                return true;
            }
            else if (myArray[charCount - 1] == 'e')
            {
                Console.WriteLine("Number cannot end with exponent sign!");
                return true;
            }
            return false;
        }

        public bool IsNumber(string s)
        {
            //Create a cache for Characters and a more limited cache for exponent-valid options
            HashSet<char> characterCache = CreateCache() as HashSet<char>;

            //Trim preceding and trailing spaces and get a character count
            s = s.Trim(' ');
            var myArray = s.ToCharArray();
            int charCount = myArray.Count();


            //----------Edge Cases-----------------

            if (charCount == 0)
                return false;

            if (charCount > 2)
            {
                if (myArray[0] == '.' && myArray[1] == 'e')
                    return false;
                if (myArray[0] == '-' && myArray[1] == 'e')
                    return false;
                if (myArray[charCount - 1] == '-' | myArray[charCount - 1] == '+')
                    return false;
                if (charCount == 2)
                {
                    if (myArray[0] == '-' && myArray[1] == '.')
                        return false;
                }
            }




            //If there are signs present in the array, check if there are too many, and validate positions
            if (myArray.Contains('+') || myArray.Contains('-'))
            {
                if (TooManyPosNegSigns(myArray))
                    return false;
            }

            //Ensure that there is a maximum of one period
            if (myArray.Contains('.'))
            {
                if (TooManyPeriods(myArray))
                    return false;
            }

            //Numbers cannot lead with an 'e' or end with an 'e'
            if (myArray.Contains('e'))
            {
                if (FalseExponentDeclaration(myArray, charCount))
                    return false;
            }

            //----------Edge Cases-----------------


            //Check the characters
            foreach (char c in myArray)
            {
                //If it could be an exponent, validate the subarray of the potential exponent characters
                if (c == 'e')
                {
                    //Build the subarray as a list(more dynamic)
                    List<char> exponent = new List<char>();
                    for (int i = Array.IndexOf(myArray, c) + 1; i < charCount; i++)
                    {
                        exponent.Add(myArray[i]);
                    }
                    //Perform the secondary validation on the exponent list
                    if (ExponentIsValid(exponent))
                        return true;
                    else
                        return false;
                }

                //Check against normal character cache
                else
                {
                    if (Checker(c, characterCache))
                        continue;
                    else
                        return false;
                }
            }
            return true;
        }
    }

    public class JewelsAndStones
    {
        public int CountJewels(string j, string s)
        {
            HashSet<char> jewelsCache = new HashSet<char>();
            j.ToCharArray();
            foreach (char c in j)
            {
                jewelsCache.Add(c);
            }

            s.ToCharArray();

            int counter = 0; 
            foreach(char c in s)
            {
                if (jewelsCache.Contains(c))
                    counter++;
            }
            return counter;
        }
    }

    public class ToLower
    {
        public string ToLowerCase(string str)
        {
            str.ToLower();
            return str;
        }
    }
    
    public class Traversal
    {

    }

    public class Node
    {
        public Node leftChild;
        public Node rightChild;
        public Node myParent;
        public int value;

        public Node (Node parent, Node left, Node right, int newValue)
        {
            this.myParent = parent;
            this.leftChild = left;
            this.rightChild = right;
            this.value = newValue;
        }

        public void AddLChild(int newValue)
        {
            this.leftChild = new Node(this, null, null, newValue);
        }

        public void AddRChild(int newValue)
        {
            this.rightChild = new Node(this, null, null, newValue);
        }

        public void UpdateValue(int newValue)
        {
            this.value = newValue;
        }

    }

    public class SampleTree
    {
        public Node GenerateSample()
        {
            Node root = new Node(null, null, null, 0);

            return root;
        }









    }

    class Solution2
    {
        public int solution(int[] A)
        {
            Dictionary<int, HashSet<int>> myDatabase = new Dictionary<int, HashSet<int>>();
            List<int> cache = new List<int>();
            int N = A.Count();

            for (int i = 0; i < N; i++)
            {
                Console.WriteLine("loop " + i + " adding " + A[i]); 
                //If the key already exists, don't recreate it just access and add value to HashSet
                if (myDatabase.ContainsKey(A[i]))
                {
                    Console.WriteLine("Contains " + A[i]);
                    myDatabase[A[i]].Add(i);
                }
                //Else create and add value
                else
                {
                    myDatabase.Add(A[i], new HashSet<int>());
                    myDatabase[A[i]].Add(i);
                    cache.Add(A[i]);
                }
            }

            //Run the Math on the Pairs
            int counter = 0;
            foreach (int i in cache)
            {
                foreach (int P in myDatabase[i])
                {
                    int instances = myDatabase[i].Count();
                    for (int Q = instances; Q > 0; Q--)
                    {
                        if (0 <= P && P < Q && Q < N)
                        {
                            counter++;
                        }
                    }
                }
            }

            return counter;
        }
    }

    class Solution
    {
        public int solution(int[] A)
        {
            int[] PArray = A;
            int[] QArray = A;
            int[] RArray = A;
            int N = A.Count();

            var perimeter = -1;
            for (int P = 0; P < N; P++ )
            {
                for (int Q = 0; Q < N; Q++ )
                {
                    if (Q == P)
                        continue;
                    for (int R = 0; R < N; R++ )
                    {
                        if (R == Q || R == P)
                            continue;

                        int p = PArray[P];
                        int q = QArray[Q];
                        int r = RArray[R];

                        if (p + q > r && q + r > p && r + p > q)
                        {
                            if (p + r + q > perimeter)
                            {
                                perimeter = p + r + q;
                            }
                        }
                    }
                }
            }
            return perimeter;
        }
    }


    class Program
    {
        static void Main()
        {
            /*
             
            Console.ReadKey();
            Stopwatch timer = new Stopwatch();
            timer.Start();
            timer.Stop();
            timer.Restart();
            TimeSpan ts = timer.Elapsed;
            string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);

            */

            //Console.WriteLine(output);



            Solution test = new Solution();
            int[] input = { 10,2,5,1,8,20 };
            int output = test.solution(input);



            Console.WriteLine("Final Output: " + output);





            Console.ReadKey();

            //----------------------------------


            /*

            Solution test = new Solution();
            string input;
            bool result;
            Console.WriteLine("------------------------------");
            input = "1000";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.WriteLine("------------------------------");
            input = "     134651346       ";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.WriteLine("------------------------------");
            input = "     1346sdfb346       ";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.WriteLine("------------------------------");
            input = "     1654.45e-714       ";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.WriteLine("------------------------------");
            input = "     -1324526435e-714       ";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.WriteLine("------------------------------");
            input = "     1654.45e-714       ";
            result = test.IsNumber(input);
            Console.WriteLine("------------------------------");
            Console.WriteLine("Input Given: " + input);
            Console.WriteLine("Output result: " + result);
            Console.ReadKey();

            //----------------------------------

            Stopwatch timer = new Stopwatch();

            BottlesOfBeer beer = new BottlesOfBeer();

            int beers = 5000;

            timer.Start();
            beer.SingBottlesOfBeer(beers);
            timer.Stop();
            TimeSpan ts = timer.Elapsed;
            string elapsedTime1 = String.Format("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);

            timer.Restart();

            timer.Start();
            beer.RecursiveIPAs(beers);
            timer.Stop();

            TimeSpan ts2 = timer.Elapsed;
            string elapsedTime2 = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",ts2.Hours, ts2.Minutes, ts2.Seconds,ts2.Milliseconds / 10);

            Console.WriteLine("Execution Took: " + elapsedTime1 + " ms");
            Console.WriteLine("Execution Took: " + elapsedTime2 + " ms");

            Console.ReadKey();


            
            
            //----------------------------------


            UniqueCharCounter myCounter = new UniqueCharCounter();

            string sampleText = "Pokemon Go Community Day: Swinub Edition!";
            Dictionary<char,int> dict = myCounter.RunCharCounter(sampleText) as Dictionary<char, int>;

            foreach (char key in dict.Keys)
            {
                Console.WriteLine("Found " + dict[key] + " Occurences of " + key);
            }


            Console.ReadKey();

            //----------------------------------



            Anagram myAna = new Anagram();

            string word1 = "iceman";
            string word2 = "cinema";

            bool myBool = myAna.RunAnagram(word1,word2);
            Console.WriteLine("Word 1 " + word1);
            Console.WriteLine("Word 2 " + word2);
            Console.WriteLine("Are these words Anagrams? " + myBool);
            Console.WriteLine("------------------------------");

            word1 = "polecat";
            word2 = "Potato";

            myBool = myAna.RunAnagram(word1, word2);
            Console.WriteLine("Word 1 " + word1);
            Console.WriteLine("Word 2 " + word2);
            Console.WriteLine("Are these words Anagrams? " + myBool);
            Console.WriteLine("------------------------------");

            word1 = "tommarvoloriddle";
            word2 = "iamlordvoldemort";

            myBool = myAna.RunAnagram(word1, word2);
            Console.WriteLine("Word 1 " + word1);
            Console.WriteLine("Word 2 " + word2);
            Console.WriteLine("Are these words Anagrams? " + myBool);
            Console.WriteLine("------------------------------");
            Console.ReadKey();





            //----------------------------------

           

            
            Palindrome pal = new Palindrome();

            var test = pal.RunPalindrome("racecar");
            Console.WriteLine("Palindrome? " + test);
            Console.WriteLine("---------------------------");
            test = pal.RunPalindrome("potato");
            Console.WriteLine("Palindrome? " + test);
            Console.WriteLine("---------------------------");
            test = pal.RunPalindrome("palindrome");
            Console.WriteLine("Palindrome? " + test);
            Console.WriteLine("---------------------------");
            test = pal.RunPalindrome("tacocat");
            Console.WriteLine("Palindrome? " + test);
            Console.WriteLine("---------------------------");
            Console.ReadKey();
            
            //----------------------------------
           
            List<string> myList = new List<string> { "test case 1", "test case 2", "test case 3", "test case 4", "potato", "test case 5" };
            string searchString = "potato";

            SequentialSearch mySearch = new SequentialSearch();
            mySearch.RunSequentialSearch(myList, searchString);

            Console.ReadKey();


            //----------------------------------
               
    
            var fb = new FizzBuzz();
            fb.RunFizzBuzz();

            //----------------------------------
    
            var Stacker = new myStack();

            bool isEmpty;

            isEmpty = Stacker.is_Empty();
            Stacker.Push(1);
            Stacker.Push(2);
            Stacker.Push(3);
            isEmpty = Stacker.is_Empty();
            int peek = Stacker.Peek();
            int size = Stacker.Size();
            int pop1 = Stacker.Pop();
            int pop2 = Stacker.Pop();
            int pop3 = Stacker.Pop();
            isEmpty = Stacker.is_Empty();

            Console.ReadKey();
            
            //----------------------------------

            var Calculator = new Algorithms();

            //inputs
            int a = 9;
            int b = 12;

            var myGCD_On = Calculator.GDC_Recursive(a, b);
            var myGCD_O1 = Calculator.GCD_NonRecursive(a, b);

            Console.WriteLine("Greatest Common Demonimator: " + myGCD_On);
            Console.WriteLine("Greatest Common Demonimator: " + myGCD_O1);
            Console.ReadKey();
            */
        }
    }
}
